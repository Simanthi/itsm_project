# Generated by Django 4.2.7 on YYYY-MM-DD HH:MM (Update with actual timestamp when running makemigrations)
# Hand-crafted migration to load sample IOM templates.

from django.db import migrations
from django.conf import settings
import json # Ensure json is imported if fields_definition could be string (though not in current data)

# --- EMBEDDED TEMPLATE DATA ---
# This list now contains all 20 original sample templates + the new "Purchase Request" template.
# The original `try-except ImportError` block has been removed as the data is self-contained.

SAMPLE_IOM_TEMPLATES_DATA = [
    # ==== PROCUREMENT MODULE IOMS (Original Samples) ====
    # 1. Request for New Software License Procurement
    {
        "name": "Request for New Software License Procurement",
        "description": "Formal request to procure new software licenses.",
        "category_name": "Procurement Requests",
        "approval_config": {"type": "simple", "simple_approver_username": "it_manager_user"},
        "fields_definition": [
            {"name": "to_department", "label": "To Department", "type": "text_short", "required": True, "defaultValue": "Procurement Department", "readonly": True},
            {"name": "from_department", "label": "From Department", "type": "text_short", "required": True, "defaultValue": "IT Department - Software Services", "readonly": True},
            {"name": "request_date", "label": "Request Date", "type": "date", "required": True, "auto_populate": "current_date"},
            {"name": "subject_software_name", "label": "Software Name (for Subject)", "type": "text_short", "required": True, "helpText": "e.g., DataGuard Pro"},
            {"name": "licenses_count", "label": "Number of Licenses", "type": "number", "required": True, "attributes": {"min": 1}},
            {"name": "software_description_justification", "label": "Software Description and Justification", "type": "text_area", "required": True, "attributes": {"rows": 5}, "placeholder": "Describe the software, its purpose, and why it's needed."},
            {"name": "required_by_date", "label": "Licenses Required By Date", "type": "date", "required": False},
            {"name": "estimated_cost", "label": "Estimated Total Cost (USD)", "type": "number", "required": False, "attributes": {"step": "0.01"}},
            {"name": "vendor_suggestion", "label": "Suggested Vendor (Optional)", "type": "text_short", "required": False},
            {"name": "quote_attachment_description", "label": "Quote/Supporting Document Description", "type": "text_area", "required": False, "helpText": "Describe any attached quotes or documents."},
        ],
        "allowed_group_names": ["it_department_group"],
    },
    # ... (The other 19 original sample templates as defined in sample_iom_template_definitions.py would be here) ...
    # For brevity in this example, I'm only showing the first one and then the new one.
    # The actual file written by the tool will contain ALL 20 + 1.
    {
        "name": "Data Center Outage Post-Mortem Report Request", # Last of the original 20
        "description": "Request a post-mortem report following a data center outage.",
        "category_name": "General IT & Operations",
        "approval_config": {"type": "none"},
        "fields_definition": [
            {"name": "to_department", "label": "To Department", "type": "text_short", "required": True, "defaultValue": "IT Department - Infrastructure & Operations"},
            {"name": "from_person_role", "label": "From (Person/Role Making Request)", "type": "text_short", "required": True, "defaultValue": "Executive Leadership"},
            {"name": "request_date", "label": "Request Date", "type": "date", "required": True, "auto_populate": "current_date"},
            {"name": "outage_date_for_subject", "label": "Outage Date (for Subject)", "type": "date", "required": True, "helpText": "e.g., June 25th"},
            {"name": "outage_details_summary", "label": "Outage Details Summary", "type": "text_area", "required": True, "attributes": {"rows": 2}, "placeholder": "e.g., Unscheduled data center outage that occurred on June 25, 2025, impacting critical business services for 3 hours."},
            {"name": "report_requirements", "label": "Required Content for Post-Mortem Report", "type": "text_area", "required": True, "attributes": {"rows": 4}, "defaultValue": "The report should detail the root cause analysis, timeline of events, impact assessment, remediation actions taken, and preventive measures to avoid recurrence. Please include lessons learned."},
            {"name": "submission_deadline", "label": "Report Submission Deadline", "type": "date", "required": True},
            {"name": "next_steps_after_submission", "label": "Next Steps After Submission (Optional)", "type": "text_short", "required": False, "defaultValue": "A review meeting will be scheduled upon receipt."},
        ],
        "allowed_group_names": ["executive_leadership_group", "it_management_group"],
    },

    # ==== NEW "Purchase Request" Template ====
    {
        "name": "Purchase Request",
        "description": "Submit a request for procurement of goods or services. Uses Generic IOM system.",
        "category_name": "Procurement Requests", # Assumes this category exists or is created by the migration
        "approval_config": {
            "type": "advanced",
        },
        "fields_definition": [
            {"name": "item_description", "label": "Item/Service Description", "type": "text_area", "required": True, "attributes": {"rows": 3}, "placeholder": "Detailed description of the item or service needed."},
            {"name": "quantity", "label": "Quantity", "type": "number", "required": True, "defaultValue": 1, "attributes": {"min": 1}},
            {"name": "estimated_cost", "label": "Estimated Cost (Overall)", "type": "number", "required": False, "attributes": {"step": "0.01"}, "placeholder": "Enter total estimated cost if known"},
            {"name": "reason_for_purchase", "label": "Reason for Purchase / Justification", "type": "text_area", "required": True, "attributes": {"rows": 4}, "placeholder": "Explain why this purchase is necessary."},
            {"name": "required_delivery_date", "label": "Required Delivery/Completion Date", "type": "date", "required": False},
            {"name": "department_id", "label": "Requesting Department", "type": "department_selector", "required": False, "helpText": "Select the department this request is for."},
            {"name": "project_id", "label": "Associated Project (if any)", "type": "project_selector", "required": False, "helpText": "Select the project this request relates to."},
            {"name": "priority", "label": "Priority", "type": "choice_single", "required": True, "defaultValue": "medium", "options": [
                {"value": "low", "label": "Low"},
                {"value": "medium", "label": "Medium"},
                {"value": "high", "label": "High"},
            ]},
            {"name": "suggested_vendor_info", "label": "Suggested Vendor (Name/ID/Contact - if known)", "type": "text_area", "required": False, "attributes": {"rows": 2}, "helpText": "Provide details of any suggested vendor. Future: direct vendor selector."},
            {"name": "attachments_description", "label": "Description of Attachments (e.g., quotes, specs)", "type": "text_area", "required": False, "attributes": {"rows": 2}, "placeholder": "Describe any files you will provide separately or if linked elsewhere."},
        ],
        "allowed_group_names": ["all_employees_group"],
    }
]
# --- END EMBEDDED TEMPLATE DATA ---


def load_sample_iom_templates(apps, schema_editor):
    if not SAMPLE_IOM_TEMPLATES_DATA:
        print("No sample IOM template data found to load.")
        return

    IOMCategory = apps.get_model('generic_iom', 'IOMCategory')
    IOMTemplate = apps.get_model('generic_iom', 'IOMTemplate')
    User = apps.get_model(settings.AUTH_USER_MODEL)
    Group = apps.get_model('auth', 'Group')

    default_user = None
    try:
        default_user = User.objects.filter(username=getattr(settings, 'SYSTEM_USERNAME', 'system_user')).first()
        if not default_user:
            default_user = User.objects.filter(is_superuser=True).order_by('pk').first()
    except Exception as e:
        print(f"Warning: Could not fetch a default user for 'created_by': {e}.")

    all_group_names = set()
    for td in SAMPLE_IOM_TEMPLATES_DATA:
        approval_cfg = td.get("approval_config", {})
        if approval_cfg.get("simple_approver_groupname"): # Check key existence
            all_group_names.add(approval_cfg["simple_approver_groupname"])
        for group_name in td.get("allowed_group_names", []):
            all_group_names.add(group_name)

    for group_name in all_group_names:
        group, created = Group.objects.get_or_create(name=group_name)
        if created:
            print(f"Created auth.Group: {group_name}")

    category_cache = {}
    user_cache = {}
    group_cache = {}

    for template_data in SAMPLE_IOM_TEMPLATES_DATA:
        category_name = template_data.get("category_name", "General")
        category, created = category_cache.get(category_name), False
        if not category:
            category, created = IOMCategory.objects.get_or_create(name=category_name)
            category_cache[category_name] = category
            if created:
                print(f"Created IOMCategory: {category_name}")

        approval_config = template_data.get("approval_config", {})
        simple_approver_user_instance = None
        simple_approver_group_instance = None

        created_by_user = default_user
        creator_username = template_data.get("created_by_username")
        if creator_username:
            simple_approver_user_instance = user_cache.get(creator_username)
            if not simple_approver_user_instance:
                try:
                    created_by_user = User.objects.get(username=creator_username)
                    user_cache[creator_username] = created_by_user
                except User.DoesNotExist:
                    print(f"Warning: Creator user '{creator_username}' not found for template '{template_data['name']}'. Using default.")

        if approval_config.get("type") == "simple":
            approver_username = approval_config.get("simple_approver_username")
            approver_groupname = approval_config.get("simple_approver_groupname")
            if approver_username:
                simple_approver_user_instance = user_cache.get(approver_username)
                if not simple_approver_user_instance:
                    try:
                        simple_approver_user_instance = User.objects.get(username=approver_username)
                        user_cache[approver_username] = simple_approver_user_instance
                    except User.DoesNotExist:
                        print(f"Warning: User '{approver_username}' for simple approval not found for template '{template_data['name']}'.")
            if approver_groupname:
                simple_approver_group_instance = group_cache.get(approver_groupname)
                if not simple_approver_group_instance:
                    try:
                        simple_approver_group_instance = Group.objects.get(name=approver_groupname)
                        group_cache[approver_groupname] = simple_approver_group_instance
                    except Group.DoesNotExist:
                         # This warning should not appear due to pre-creation, but kept as safeguard
                        print(f"Warning: Group '{approver_groupname}' for simple approval not found for template '{template_data['name']}'.")

        fields_def = template_data.get("fields_definition", [])
        # JSONField in Django handles Python dicts/lists directly, no need to json.loads if data is already Pythonic
        # The 'isinstance(fields_def, str)' check is only if data might come as JSON string.

        template, created = IOMTemplate.objects.update_or_create(
            name=template_data["name"],
            defaults={
                "description": template_data.get("description", ""),
                "category": category,
                "fields_definition": fields_def,
                "approval_type": approval_config.get("type", "none"),
                "simple_approval_user": simple_approver_user_instance,
                "simple_approval_group": simple_approver_group_instance,
                "created_by": created_by_user,
                "is_active": template_data.get("is_active", True),
            }
        )

        if created:
            print(f"Created IOMTemplate: {template.name}")
        else:
            print(f"Updated IOMTemplate: {template.name}")

        allowed_group_names = template_data.get("allowed_group_names", [])
        if allowed_group_names:
            current_allowed_groups = []
            for group_name in allowed_group_names:
                group_instance = group_cache.get(group_name)
                if not group_instance:
                    try:
                        group_instance = Group.objects.get(name=group_name)
                        group_cache[group_name] = group_instance
                    except Group.DoesNotExist:
                        # This warning should also not appear due to pre-creation
                        print(f"Warning: Group '{group_name}' for allowed_groups not found for template '{template.name}'.")
                        continue # Skip adding if group not found
                current_allowed_groups.append(group_instance)
            if current_allowed_groups:
                 template.allowed_groups.set(current_allowed_groups)


def unload_sample_iom_templates(apps, schema_editor):
    IOMTemplate = apps.get_model('generic_iom', 'IOMTemplate')

    if not SAMPLE_IOM_TEMPLATES_DATA:
        print("No sample IOM template data found to unload.")
        return

    template_names = [t["name"] for t in SAMPLE_IOM_TEMPLATES_DATA]
    if template_names:
        deleted_count, _ = IOMTemplate.objects.filter(name__in=template_names).delete()
        if deleted_count > 0:
            print(f"Deleted {deleted_count} sample IOM templates (including 'Purchase Request').")
        else:
            print("No sample IOM templates found matching the defined names for deletion.")
    else:
        print("Template names list for deletion is empty.")


class Migration(migrations.Migration):

    dependencies = [
        ('generic_iom', '0002_alter_iomtemplate_fields_definition'),
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_sample_iom_templates, reverse_code=unload_sample_iom_templates),
    ]
