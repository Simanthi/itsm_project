from django.test import TestCase
from django.contrib.auth import get_user_model
import datetime

from procurement.models import (
    PurchaseRequestMemo, PurchaseOrder, OrderItem, CheckRequest,
    Department, Project, Contract, GLAccount, ExpenseCategory, RecurringPayment
)
from assets.models import Vendor as AssetVendor
from procurement.serializers import (
    PurchaseRequestMemoSerializer, PurchaseOrderSerializer, CheckRequestSerializer
    # OrderItemSerializer is usually tested via PurchaseOrderSerializer if it's nested
)

User = get_user_model()

class ProcurementSerializersTestCase(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='serializeruser', password='password123')
        self.vendor = AssetVendor.objects.create(name='Serializer Vendor Assets')
        self.department = Department.objects.create(name='Serializer Dept', department_code='SD')
        self.project = Project.objects.create(name='Serializer Project', project_code='SP')
        self.gl_account = GLAccount.objects.create(account_code='S6000', name='Serializer Supplies')
        self.contract = Contract.objects.create(contract_id='CTR-SER-001', title='Ser Agr', vendor=self.vendor, start_date=datetime.date.today())
        self.expense_category = ExpenseCategory.objects.create(name='Ser Expense Cat')

        # Create an IOM that is 'approved' to be linkable to a PO
        self.iom_for_po_ser = PurchaseRequestMemo.objects.create(
            item_description='IOM for PO Ser',
            quantity=1,
            reason='Test Ser',
            requested_by=self.user,
            status='approved' # Assuming POs are created from approved IOMs
        )


        self.memo_data = {
            'item_description': 'Memo Item', 'quantity': 2, 'reason': 'Serializer test',
            'estimated_cost': '50.00',
            'department': self.department.id,
            'project': self.project.id,
            'priority': 'medium',
            'required_delivery_date': str(datetime.date.today()),
            'suggested_vendor': self.vendor.id,
            # attachments handled separately if needed via API tests or by passing File objects
        }
        self.po_data = {
            # 'po_number': 'PO-SER-001', # Auto-generated by model save
            'vendor': self.vendor.id,
            'order_date': str(datetime.date.today()),
            'internal_office_memo': self.iom_for_po_ser.id,
            'payment_terms': 'Net 30',
            'shipping_method': 'Air Freight',
            'po_type': 'services',
            'currency': 'USD',
            'related_contract': self.contract.id,
            'billing_address': 'Bill here',
            'order_items': [
                {
                    'item_description': 'Service X', 'quantity': 1, 'unit_price': '200.00',
                    'product_code': 'SVC01', 'gl_account': self.gl_account.id, 'line_item_status': 'pending'
                }
            ]
        }
        self.cr_data = {
            'amount': '120.50',
            'payee_name': self.vendor.name,
            'reason_for_payment': 'Invoice #INV123',
            'currency': 'USD',
            'is_urgent': False,
            'expense_category': self.expense_category.id,
            'invoice_date': str(datetime.date.today()),
            # 'purchase_order': po_instance.id # if linking to an existing PO
        }

    def test_purchase_request_memo_serializer_create(self):
        # Context for serializers that might use request (e.g. for HyperlinkedRelatedField or user)
        # For basic ModelSerializer, often not strictly needed if not using such features.
        # Mocking request for serializer context if it accesses request.user for defaults etc.
        mock_request = type('Request', (), {'user': self.user, 'method': 'POST'})

        serializer = PurchaseRequestMemoSerializer(data=self.memo_data, context={'request': mock_request})
        self.assertTrue(serializer.is_valid(), serializer.errors)
        # The serializer expects 'requested_by' to be set by the view, so we pass it in save()
        memo = serializer.save(requested_by=self.user)
        self.assertEqual(memo.item_description, self.memo_data['item_description'])
        self.assertEqual(memo.department, self.department)
        self.assertEqual(memo.status, 'draft') # Default status set by perform_create or model's save

    def test_purchase_order_serializer_create(self):
        mock_request = type('Request', (), {'user': self.user, 'method': 'POST'})
        serializer = PurchaseOrderSerializer(data=self.po_data, context={'request': mock_request})
        self.assertTrue(serializer.is_valid(), serializer.errors)
        po = serializer.save(created_by=self.user) # Pass user for created_by
        # self.assertEqual(po.po_number, self.po_data['po_number']) # po_number is auto-generated
        self.assertIsNotNone(po.po_number)
        self.assertEqual(po.order_items.count(), 1)
        self.assertEqual(po.order_items.first().item_description, 'Service X')
        self.assertEqual(po.currency, 'USD')
        # Total amount check
        expected_total = 200.00 # From order_items
        self.assertAlmostEqual(po.total_amount, expected_total, places=2)


    def test_check_request_serializer_create(self):
        mock_request = type('Request', (), {'user': self.user, 'method': 'POST'})
        # Create a PO to link to the CR if needed by serializer logic or model constraints
        po_for_cr = PurchaseOrder.objects.create(vendor=self.vendor, created_by=self.user, total_amount=200)
        self.cr_data['purchase_order'] = po_for_cr.id

        serializer = CheckRequestSerializer(data=self.cr_data, context={'request': mock_request})
        self.assertTrue(serializer.is_valid(), serializer.errors)
        cr = serializer.save(requested_by=self.user) # Pass user for requested_by
        self.assertEqual(cr.payee_name, self.vendor.name)
        self.assertEqual(cr.currency, 'USD')
        self.assertEqual(cr.expense_category, self.expense_category)
        self.assertEqual(cr.status, 'pending_submission') # Default status
        self.assertIsNotNone(cr.cr_id)
